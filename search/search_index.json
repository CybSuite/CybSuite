{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CybSuite","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Warning This project is currently in Alpha stage and under active development. While core functionality is implemented and tested, the API and features may change significantly between versions.</p> <p>CybSuite is a collection of security tools and scripts for penetration testing, configuration review, and reconnaissance. The following tools are available:</p> <ul> <li>[cybs-db]: A centralized database for penetration testing, configuration review, and security assessments. Features built-in ingestors for common security tools (Nmap, Masscan, Netexec, Bloodhound, etc.), passive vulnerability scanning capabilities, reporting capabilities, and a planned web interface.</li> <li>[cybs-review]: A framework for configuration review that performs post-analysis of extracted configurations. Currently working for Windows systems, with Linux support coming soon.</li> </ul>"},{"location":"available_plugins/","title":"Available plugins","text":""},{"location":"available_plugins/#available-plugins","title":"Available Plugins","text":""},{"location":"available_plugins/#ingestors","title":"Ingestors","text":"<p>Ingest output of known tools to feed the centralized database.</p> <ul> <li>nmap: Ingest Nmap XML output file. Feed host, service and DNS.</li> <li>masscan: Ingest Masscan output file. Feed host and service.</li> <li>ipport: Ingest simple text files containing IP, IP:port (default protocol TCP) or IP:port:protocol. Feed host and service.</li> <li>netexec: Ingest NetExec databases and logs (.sam, .cached, .secrets, .db). Takes single files or folders in ~/.nxc. Not all tables are parsed yet. Feed host, service, password, ad_user, windows_user, etc.</li> <li>bloodhound: Ingest BloodHound JSON files / folder. Feed ad_domain, ad_user, ad_computer.</li> <li>impacket_ntds: Ingest NTDS dump from Impacket. Feed password, hash, ad_user.</li> <li>hashcat: Ingest Hashcat potfile. Feed password, hash.</li> </ul>"},{"location":"available_plugins/#cyberdb-scanners","title":"CyberDB Scanners","text":"<p>Passively scan the database to identify vulnerabilities and update the database.</p> <ul> <li>clean_ports: Delete ports 2000 and 5060 which are commonly false positives, and remove hosts that only have these ports.</li> <li>smb: Scan for SMB services. Alert for SMB v1 and no-signing.</li> <li>services: Scan for vulnerable services from version and banner.</li> <li>auth: Scan passwords and hashes, weak password, reuse, etc.</li> </ul>"},{"location":"install/","title":"Install","text":""},{"location":"install/#installation","title":"Installation","text":"<p>Install CybSuite using pipx and docker for PostgreSQL database</p>"},{"location":"install/#install-pipx","title":"Install pipx","text":"<pre><code>sudo apt update &amp;&amp; sudo apt install -y git python3 pipx\npipx ensurepath &amp;&amp; exec $SHELL\n</code></pre>"},{"location":"install/#install-cybsuite","title":"Install CybSuite","text":"<pre><code>pipx install git+https://github.com/CybSuite/CybSuite\n</code></pre>"},{"location":"install/#install-docker","title":"Install Docker","text":"<pre><code>curl -fsSL \"https://get.docker.com/\" | sh\n</code></pre>"},{"location":"install/#install-postgresql","title":"Install PostgreSQL","text":"<p>PostgreSQL is required for CybSuite. If you have PostgreSQL installed, configure connection settings in <code>~/cybsuite/conf.toml</code> or via CLI:</p> <pre><code>cybs-workspace conf cyberdb.host &lt;ip&gt;\ncybs-workspace conf cyberdb.port &lt;port&gt;\ncybs-workspace conf cyberdb.user &lt;user&gt;\ncybs-workspace conf cyberdb.password &lt;password&gt;\n</code></pre> <p>Or using docker:</p> <pre><code># Generate random password\nPOSTGRES_PASSWORD=$(openssl rand -base64 30)\necho \"Generated PostgreSQL password: $POSTGRES_PASSWORD\"\n\n# Pull and run PostgreSQL container\nsudo docker run \\\n    --name cybsuite-db \\\n    -e POSTGRES_PASSWORD=\"$POSTGRES_PASSWORD\" \\\n    --restart unless-stopped \\\n    -v cybsuite_data:/var/lib/postgresql/data \\\n    -p 127.0.0.1:13372:5432 \\\n    -d \\\n    postgres\n\n# Set password in CybSuite conf\ncybs-workspace conf cyberdb.password \"$POSTGRES_PASSWORD\"\n</code></pre>"},{"location":"cyberdb/introduction/","title":"Introduction","text":""},{"location":"cyberdb/introduction/#overview","title":"Overview","text":"<p>CyberDB is the core component of the CybSuite tools, responsible for managing all data. Currently, it is primarily utilized by cybs-db for data management. The database is built on PostgreSQL and is designed to be extensible, allowing for easy schema extensions as needed.</p> <p>CyberDB includes a CLI <code>cybs-db</code> that allows users to query and update its data efficiently.</p>"},{"location":"cyberdb/introduction/#key-features","title":"Key Features","text":"<ul> <li>Extensible Plugins: Supports two types of plugins that can be customized and extended:</li> <li>Ingestors: Facilitate the import of data into the database from external tools like Masscan, Nmap, BloodHound, etc.</li> <li>Reporters: Generate a variety of reports in formats such as HTML, PDF, XLSX, and more.</li> </ul>"},{"location":"dev_core/introduction/","title":"Core Developer Guide","text":"<p>This section is the developer guide for those who want to contribute to and develop the core CybSuite project. Here you'll learn how to:</p> <ul> <li>Understand the internal architecture and design</li> <li>Modify core functionality and components</li> </ul> <p>Prerequisites: Before diving into core development, it's recommended to read the Extension Developer Guide first to understand the basics. At minimum, review the Development Environment and Tests guides.</p> <p>If you're only interested in developing plugins or extensions, please see the Extension Developer Guide instead.</p>"},{"location":"dev_core/introduction/#technologies-and-libraries","title":"Technologies and Libraries","text":"<p>This project uses the Python library <code>koalak</code> (maintained by the CybSuite team) for core utilities:</p> <ul> <li><code>koalak.plugin_manager</code>: Handles the plugin architecture and extensibility</li> <li><code>koalak.subcommand_parser</code>: Light wrapper around argparse for CLI functionality</li> <li><code>koalak.description</code>: Provides dataclasses (<code>FieldDescription</code>, <code>EntityDescription</code>, <code>SchemaDescription</code>) for database schema and documentation</li> </ul> <p>Key components:</p> <ul> <li>CLI: Built with koalak.subcommand_parser (argparse wrapper)</li> <li>Database: PostgreSQL</li> <li>ORM: Django ORM in standalone mode and REST API backend</li> <li>Backend API: Django REST framework (coming soon)</li> <li>Frontend: React/Next.js (coming soon)</li> </ul>"},{"location":"dev_extension/dev_environment/","title":"Development Environment","text":""},{"location":"dev_extension/dev_environment/#setup","title":"Setup","text":"<p>Clone the repository <pre><code>git clone https://github.com/CybSuite/CybSuite\ncd cybsuite\n</code></pre></p> <p>Install the CLI in development mode <pre><code>pipx install -e .\n</code></pre> This installs the CybSuite CLI in development mode, allowing you to test it from anywhere in your system.</p> <p>Install development environment <pre><code>poetry install\n</code></pre> This sets up the development environment for web backend, docs, tests and also CLI if not using pipx.</p>"},{"location":"dev_extension/dev_environment/#database","title":"Database","text":"<p>CybSuite requires PostgreSQL. You can set it up using Docker:</p> <pre><code># Generate random password\nPOSTGRES_PASSWORD=$(openssl rand -base64 30)\necho \"Generated PostgreSQL password: $POSTGRES_PASSWORD\"\n\n# Pull and run PostgreSQL container\nsudo docker run \\\n    --name cybsuite-db \\\n    -e POSTGRES_PASSWORD=\"$POSTGRES_PASSWORD\" \\\n    --restart unless-stopped \\\n    -v cybsuite_data:/var/lib/postgresql/data \\\n    -p 127.0.0.1:13372:5432 \\\n    -d \\\n    postgres\n\ncybs-workspace conf cyberdb.password \"$POSTGRES_PASSWORD\"\n</code></pre> <p>Or configure an existing PostgreSQL instance in <code>~/cybsuite/conf.toml</code> or via CLI:</p> <pre><code>cybs-workspace conf cyberdb.host &lt;ip&gt;\ncybs-workspace conf cyberdb.port &lt;port&gt;\ncybs-workspace conf cyberdb.user &lt;user&gt;\ncybs-workspace conf cyberdb.password &lt;password&gt;\n</code></pre>"},{"location":"dev_extension/dev_environment/#backend","title":"Backend","text":"<p>Run database migrations (once) <pre><code>cd backend\npoetry run ./manage.py migrate\n</code></pre></p> <p>Start the backend webserver <pre><code>cd backend\npoetry run ./manage.py runserver\n</code></pre></p>"},{"location":"dev_extension/dev_environment/#frontend","title":"Frontend","text":"<p>Install dependencies <pre><code>cd frontend\nnpm install\n</code></pre></p> <p>Configure environment variables Create <code>.env.local</code> in the frontend directory and adapt it: <pre><code>DJANGO_API_URL=http://127.0.0.1:8000\nNEXT_PUBLIC_API_URL=http://localhost:13371\n</code></pre></p> <p>Start the frontend development server <pre><code>cd frontend\nnpm run dev\n</code></pre></p>"},{"location":"dev_extension/extension/","title":"Extension","text":"<p>It is possible to create an extension for CybSuite, for example to have another python app ith plugins. Extension allow to extend throu hooks (entry points): - plugins (ingestors, scanners, formaters, reporters, etc) - Modify CLI (add subcommands, etc)</p>"},{"location":"dev_extension/extension/#how-to","title":"How To","text":"<p>Coming soon!</p>"},{"location":"dev_extension/introduction/","title":"Extension Developer Guide","text":"<p>CybSuite is designed with extensibility in mind through its plugin architecture. You can easily extend its functionality by developing plugins (ingestors, scanners, reporters, etc.) without needing to understand the internal workings of the core system.</p>"},{"location":"dev_extension/introduction/#what-you-can-extend","title":"What You Can Extend","text":"<p>Adding Plugins - Create custom ingestors, scanners, reporters, and formatters - see Plugins Guide</p> <p>Database Schema Extensions (Coming soon) - Extend CybSuite's database schema</p> <p>Knowledge Base (Coming Soon) - Add custom data like controls definitions, tags, or other table content</p> <p>Package an Extensions - Package all your customizations into a Python package and distribute it through PyPI - see Extension Development Guide</p>"},{"location":"dev_extension/introduction/#getting-started","title":"Getting Started","text":"<p>Development Environment - See Development Environment Guide for setup instructions</p> <p>Testing - See Tests Guide for running tests</p>"},{"location":"dev_extension/introduction/#getting-further","title":"Getting further","text":"<p>If you want to go further and contribute to core features or modify the core functionality, check out the Core Developer Guide guide.</p>"},{"location":"dev_extension/plugins/","title":"Developing Plugins","text":""},{"location":"dev_extension/plugins/#plugin-development-overview","title":"Plugin Development Overview","text":"<p>CybSuite plugins (ingestors, reporters, etc.) share a common design pattern and philosophy. To create a plugin:</p> <ul> <li>Inherit from the appropriate base class (e.g., <code>BaseIngestor</code>, <code>BaseReporter</code>) - your plugin will be automatically registered through the <code>__init_subclass__</code> mechanism</li> <li>Set a unique <code>name</code> for your plugin</li> <li>Optionally add <code>metadata</code> with plugin details like description, version, authors, and dependencies</li> <li>Implement the required methods defined by the base plugin class</li> <li>Add any required fields specified by the base plugin class</li> <li>Ensure your plugin file is imported so it can be discovered and registered</li> </ul> <p>For specific implementation details, see the documentation for each plugin type.</p>"},{"location":"dev_extension/plugins/#interacting-with-the-database","title":"Interacting with the Database","text":"<p>All base plugins (<code>BaseIngestor</code>, <code>BaseReporter</code>, etc.) inherit from a common base class that provides database interaction capabilities. The following methods are available to all plugins:</p> <ul> <li> <p><code>self.alert(control_definition_name: str, details: dict, **kwargs)</code>: Creates a new control entry with <code>status=\"ko\"</code> when identifying a vulnerability or issue. Example:   <pre><code>self.alert(\"passwords:weak\", details={\"password\": \"azerty\", \"username\": \"john\"})\n</code></pre></p> </li> <li> <p><code>self.control(control_definition_name: str, details: dict, **kwargs) -&gt; Control</code>: Similar to <code>alert()</code>, but returns a <code>Control</code> object allowing you to set custom status values (<code>\"ok\"</code>, <code>\"ko\"</code>, etc.). Useful for compliance testing or tracking successful controls. Example:   <pre><code>control = self.control(\"tls:version\", details={\"version\": \"1.2\"})\ncontrol.ok()\n</code></pre></p> </li> <li> <p><code>self.feed(table_name: str, **kwargs)</code>: Upserts (updates or inserts) records into any table besides controls. Handles relations and unique keys automatically. Examples:   <pre><code># Create/update a service\nself.feed(\"service\", host=\"1.1.1.1\", port=21, protocol=\"tcp\")\n\n# Feed will automatically handle relations using unique keys\n# e.g. host.ip is the unique key when creating services\n</code></pre></p> </li> </ul>"},{"location":"dev_extension/plugins/#examples","title":"Examples","text":"<p>While detailed documentation for each plugin type is still in progress, you can find many example implementations in the main CybSuite repository:</p> <ul> <li>Ingestors: <code>cybsuite.plugins.ingestors</code></li> <li>Reporters: <code>cybsuite.plugins.reporters</code></li> <li>Scanners: <code>cybsuite.plugins.scanners</code></li> <li>Formatters: <code>cybsuite.plugins.formatters</code></li> </ul>"},{"location":"dev_extension/tests/","title":"Running Tests","text":""},{"location":"dev_extension/tests/#test-execution-overview","title":"Test Execution Overview","text":"<p>CybSuite uses <code>tox</code> for comprehensive testing, including linting, documentation generation, and unit tests.</p>"},{"location":"dev_extension/tests/#prerequisites","title":"Prerequisites","text":"<p>Install tox if not already available: <pre><code>pipx install tox\n</code></pre></p>"},{"location":"dev_extension/tests/#running-all-tests","title":"Running All Tests","text":"<p>Execute the complete test suite: <pre><code>tox\n</code></pre></p>"},{"location":"dev_extension/tests/#running-specific-tests","title":"Running Specific Tests","text":"<p>To run only specific tests, filter by environment and test function: <pre><code>tox -e py313 -- -s -v -k &lt;test_function_name&gt;\n</code></pre></p> <p>Replace <code>py313</code> with your Python version and <code>&lt;test_function_name&gt;</code> with the specific test you want to run.</p>"},{"location":"review/introduction/","title":"Introduction","text":""},{"location":"review/introduction/#overview","title":"Overview","text":"<p>Cybs-Review is a configuration review framework designed for security assessments and privilege escalation (privesc) detection. It can audit multiple systems in a single execution. Cybs-Review allows users to extend and customize its capabilities through a plugin system.</p> <p>Cybs-Review operates by first extracting the configuration of the audited system using platform-specific scripts. The extracted data is then transferred for analysis, where Cybs-Review performs post-review processing and generates reports, such as HTML reports.</p> <p>Currently, Cybs-Review supports Windows systems as the first implementation, with planned support for Linux, cloud environments, and services such as SQL databases, and web servers.</p>"},{"location":"review/introduction/#key-features","title":"Key Features","text":"<ul> <li>The existing plugins are customizable, and users can develop and integrate their own custom plugins.</li> <li>Extraction can be performed with administrator privileges for a comprehensive configuration extract, or with limited privileges to identify potential privilege escalation vectors.</li> <li>Plugins can be filtered to review individual files or search for specific controls.</li> </ul>"},{"location":"review/quickstart/","title":"Quickstart","text":"<p>In this example, assume there are 10 Windows servers and workstations to review. The first step is to obtain the extraction script. This can either be generated using the <code>cybs-review CLI</code> or downloaded from the GitHub repository [URL].</p> <pre><code># Get the extraction script from the CLI\ncybs-review script windows &gt; extract_windows.ps1\n</code></pre> <p>Next, run the script on each server. It should be executed with administrator privileges to extract all configuration. It can also be executed with limited privileges, but with less configuration extracted, and could be used to identify potential privilege escalation paths.</p> <pre><code># To be run on each Windows server (preferably as admin)\n./extract_windows.ps1\n</code></pre> <p>On the system where Cybs-Review is installed, create a new workspace, in this example named <code>windows_audit</code>:</p> <pre><code>cybs-review new windows_audit\n</code></pre> <p>Copy all the generated files into the \"extracts\" folder within the new workspace. Then, review the extracted data:</p> <pre><code>cybs-review review windows_audit\n</code></pre>"}]}