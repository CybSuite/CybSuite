version: '3.8'

services:
  frontend:
    container_name: frontend
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "13370:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    env_file:
      - ./frontend/.env.docker
    environment:
      - DJANGO_API_URL=http://backend:8000
      - NEXT_PUBLIC_API_URL=http://${NEXT_HOST_IP:-localhost}:13371
    depends_on:
      - backend
    stdin_open: true
    tty: true

  backend:
    container_name: backend
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "13371:8000"
    volumes:
      - ./src:/app/src
      - ./backend:/app/backend
      - ./pyproject.toml:/app/pyproject.toml
      - ./poetry.lock:/app/poetry.lock
    env_file:
      - ./backend/.env.docker
    environment:
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,backend,${NEXT_HOST_IP}
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000,http://frontend:3000,http://${NEXT_HOST_IP:-localhost}:13371
    depends_on:
      - postgres
    stdin_open: true
    tty: true

  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_DB: cyberdb_default
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "127.0.0.1:13372:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data:
